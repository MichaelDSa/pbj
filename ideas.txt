/// ideas.txt ///
///// ideas for pbj.py /////

Problem:
 Since the main dependency is a nested json object which is {key: {key:
 value}}) translated into python as dict[str, dict[str, str]], I need to
 come up with simple commands for changing directories.

 ideas:
  keeping things clean:
   notes:
    - un-nested keys are categories
    - nested keys are values of categories
    - nested values are values of nested keys.
   restrictions:
    - neither nested key nor category may be a number identified by
      .isdecimal().
    - All nested key names within a category must be unique
    - nested keys may have identical values of those from other categories.
    - category names must be unique. They may not be identical to names of
      other categories or any nested key.
    - nested key names must not be identical to any category name.
   rules:
    - all category-keys and nested-keys will be inserted in alphabetical
      order. A maintenance function will sort the persisted json data on
      close.

 commands:
  `pbj`
    print numbered list of default category's key-vals
  `pbj [alphanum | number]`
    if [alphanum | number] is...
     a nested-key from the default category: 
                               cd to value of key.
     a category-key: 
                               print numbered list of category
     a number:
                               cd to number associated with category key-vals
                               of the default category
  `pbj [alphanum] [alphanum | num]`
    [alphanum] can only be a category
    [alhpanum | number] in this context can only be a key associatd with a
    value in the [alphanum] category, or the number associated with it's
    key-val list.
  `pbj -s [alphanum]`
    saves $pwd to [alphanum] key in default category.
    '-s' means *save*.
    [alphanum] is the key.
  `pbj -s [alphanum1] [alphanum2 | path]
    saves $pwd to [alphanum2 | path] key in [alphanum1] category
    [alphanum1] is category
    [alphanum2 | path] is key of [alphanum1]
    if [alphanum2 | path] is a path to an existing dir:
     [alphanum1] is key to default category
     [alphanum2 | path] is path value assigned to [alphanum1] key of default
  `pbj -s [alphanum1] [alphanum2] [path]
    save specified path to specific category
    [alphanum1] is category
    [alphanum2] is key
    [path] is the value saved to [alphanum2] key of [alphanum1] category.
  `pbj -c ...`
    same args as `pbj -s ...` 
     differences:
      'pbj -c' will create new categories if they are valid and do not exist.
                               
